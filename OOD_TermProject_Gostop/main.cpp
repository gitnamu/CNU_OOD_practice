#include <iostream>

#include "Deck.h"
#include "player.h"
#include "scoreCalculator.h"

int main() {
  
  std::cout << "GIT Synchronize Test" << std::endl;
  cardBuilder builder;
  Card* aa =
      builder.setType(2).setWhere(3).setMonth(12).setName("12월 열끗").build();
  Deck a;
  // 플레이어 객체들 생성
  Player player1 = Player::Player("player1");
  Player player2 = Player::Player("player2");
  Player player3 = Player::Player("player3");
  a.Shuffle();
  
  // player1 손패 세팅
  for (int i = 0; i < 7; i++) {
    player1.setHandField(a.GetDeck()->top());
    std::cout << i << " 번 째 player1 손 패 :" << player1.handField()->back()->isName() << std::endl; // 디버깅용 출력
    a.GetDeck()->pop();
  }

  // player2 손패 세팅
  for (int i = 0; i < 7; i++) {
    player2.setHandField(a.GetDeck()->top());
    std::cout << i << " 번 째 player2 손 패 :"
              << player2.handField()->back()->isName() << std::endl;  // 디버깅용 출력
    a.GetDeck()->pop();
  }

  // player3 손패 세팅
  for (int i = 0; i < 7; i++) {
    player3.setHandField(a.GetDeck()->top());
    std::cout << i << " 번 째 player3 손 패 :"
              << player3.handField()->back()->isName() << std::endl;  // 디버깅용 출력
    a.GetDeck()->pop();
  }

  // 바닥 패 세팅
  for (int i = 0; i < 6; i++) {
    a.GetFloor()->push_back(a.GetDeck()->top());
    std::cout << i << " 번 째 바닥 패 :" << a.GetDeck()->top()->isName()
              << std::endl;
    a.GetDeck()->pop();
  }

  // stop 전 까지 게임 진행 (임시 테스트)
  while (!player1.stop() && !player2.stop() && !player3.stop()) {
    a.prints();                  // vector의 마지막 카드부터 출력
    player1.printMyHandField();  // 내 손 패 출력
    int nthCard;
    std::cout << "몇 번 카드를 낼지 골라주세요 : ";
    std::cin >> nthCard;

    // 범위 밖의 수 입력시 재입력 요청
    while ((nthCard > player1.handField()->size() - 1) || (nthCard < 0)) {
      std::cout << "잘못된 수 입니다. 몇 번 카드를 낼지 다시 골라주세요 : ";
      std::cin >> nthCard;
    }
    Card* player1_ChoosedCard = player1.handOut(nthCard);
    std::cout <<player1_ChoosedCard->isName() << std::endl;
    // 플레이어 1 카드 선택 종료 //
    // 플레이어 1 카드가 먹을 게 있는지 확인 // 
    std::cout << "먹을카드 있는지 확인" << std::endl;
    bool isMatchAvailable = false;
    for (int i = 0; i < a.GetFloor()->size(); i++) {
      Card* floorCard = a.GetFloor()->at(i);
      if (player1_ChoosedCard->cardMonth() == floorCard->cardMonth()) {
        // 벡터 순회하며 플레이어가 낸 카드와 일치하는 카드 있는지 확인
        isMatchAvailable = true;
      }
    }
    if (!isMatchAvailable) { std::cout << "선택한 카드와 일치하는 카드가 없습니다." << std::endl; }
    // 플레이어 1 먹을 카드 선택 //
    
    std::cout << "먹을 카드를 선택해 주세요 : ";
    
  }
  return 0;
}